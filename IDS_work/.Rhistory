a <- 5
b <- rep(NA, 10)
b
b
b
b
b[5] <- 10
b
c
c
c
d
c
c<-rnorm(10, 2, 3)
c*4
vec1<- c(1,4,5,7)
vec1*3
vec2<- c(1,2,3,'G')
vec2*2
vec2<- c(1,2,3,"R")
vec2*2
vec1*vec2
vec1<-rnorm(5)
vec2<-c(4,4,4,4,4)
vec1*vec2
vec1<-rnorm(5)
vec2<-c(4,4,4,4,4)
vec1*vec2
vec1[5]/vec2[3]
vec2<-re(4,100)
vec2<-rep(4,100)
vec1<-rnorm(5)
vec2<-rep(4,100)
vec1*vec2
vec1[5]/vec2[3]
vec1<-rnorm(5)
vec2<-rep(4,5)
vec1*vec2
vec1[5]/vec2[3]
vec2<-rep(4,5)
vec1*vec2
vec1[5]/vec2[3]
# Assign a variable like so
a <- 2
# Repeat a variable---here, NA--10 times an call it b
# rep is a function (1st arg what to repeat, 2nd arg how many times to repeat)
b <- rep(NA, 10)
#square brackets for indexing i.e. assign 5 element number 10
b[5] <- 10
# Can generate a vector of random numbers with mean = 2 and
# standard deviation = 3
c<-rnorm(10, 2, 3)
# Can multiply a vector by a scalar
c*4
# And can use all common mathematical operators
d <- 4 + (c^3)/2 + log(abs(c))
d
vec1<-rnorm(5)
vec2<-rep(4,5)
vec1*vec2
vec1[5]/vec2[3]
Series3 = sample(LETTERS, 100, replace = TRUE))
Series3 = sample(LETTERS, 100, replace = TRUE))
LETTERS
test.data <- data.frame(Series1 = rnorm(100),
Series2 = rnorm(100),
Series3 = sample(LETTERS, 100, replace = TRUE))
test.data <- data.frame(Series1 = rnorm(100),
Series2 = rnorm(100),
Series3 = sample(LETTERS, 100, replace = TRUE))
View(test.data)
str(test.data)
plot(test.data$Series1)
# Plot a factor series
plot(test.data$Series3)
# Plot a data frame
plot(test.data)
# Summarise the dataframe---useful for initial checking
summary(test.data)
str(test.data)
plot(test.data$Series1)
plot(test.data$Series3)
plot(test.data)
# The first row
test.data[1,]
# The third column
test.data[,3]
# The value in the second row and column
test.data[2,2]
# The third column
test.data[,3]
# The value in the second row and column
test.data[2,2]
test.data[c(TRUE, FALSE, FALSE)]
foo<-test.data[c(TRUE, FALSE, FALSE)]
View(foo)
datalist <- list()
# Add a vector of letters
datalist[[1]] <- c("A", "B", "C")
# Add a dataframe
datalist[[2]] <- test.data
# Add a model (more on this later!)
datalist[[3]] <- lm(rnorm(100) ~ rnorm(100))
# Add a model (more on this later!)
datalist[[3]] <- lm(rnorm(100) ~ rnorm(100))
datalist[[1]]
datalist[1]
datalist[[1]]
datalist[1]
datalist[[1]]
datalist[1]
?rep
?rnorm
??vector
install.packages("dplyr")
library(readr)
install.packages(readr)
install.packages("readr)
;
""
/
install.packages("readr")
dat1 <- read_csv("invoices.csv")
dat1 <- read.csv("invoices.csv")
View(dat1)
View(dat1)
?read_csv
??read_csv
library(readr)
dat1 <- read_csv("invoices.csv")
View(dat1)
View(dat1)
View(dat1)
inflation <- read_csv("inflation.csv")
View(inflation)
str(inflation)
install.package("reshape2")
library("reshape2")
plot.ts(inflation[,3:5])
?melt
plot(inflation)
plot(inflation[,3:5])
state_accounts <- <- read_csv("state_accounts.csv")
state_accounts <- read_csv("state_accounts.csv")
View(state_accounts)
state_account_molten <- melt(state_accounts, id = "Date")
View(state_account_molten)
?reshape2::dcast
value.var = value)
?reshape2::dcast
value.var = value)
state_account_wide <- dcast(state_accounts_molten, Date ~ variable, value.var = value)
View(state_account_molten)
View(state_accounts)
state_account_wide <- dcast(state_accounts_molten, Date ~ variable, value.var = "value")
state_account_wide <- dcast(state_account_molten, Date ~ variable, value.var = value)
state_account_wide <- dcast(state_account_molten, Date ~ variable, value.var = value)
?reshape2::dcast
state_account_wide <- dcast(state_account_molten, Date ~ variable, value.var = value)
state_account_wide <- dcast(state_account_molten, Date ~ variable, value.var = value)
state_account_molten <- melt(state_accounts, id = "Date")
state_account_wide <- dcast(state_account_molten, Date ~ variable, value.var = value)
?dcast
state_account_wide <- dcast(state_account_molten, Date ~ variable, value.var = state_account_molten$value)
state_account_wide <- dcast(state_account_molten, Date ~ variable, value.var = value)
state_account_wide <- dcast(state_account_molten, Date ~ variable, value.var = "value")
View(state_account_wide)
View(state_account_wide)
load(complete_data.RData)
load("complete_data.RData")
View(SA2)
sa2_molten <- melt(SA2, id = c("Name","Global Broad Category Group")
/
sa2_molten <- melt(SA2, id = c("Name","Global Broad Category Group"))
View(state_account_molten)
View(state_account_molten)
View(sa2_molten)
str(SA2)
?melt
sa2_molten <- melt(SA2[6:197], id = "Name")
sa2_molten <- melt(SA2[6:197], id = "Name")
sa2_molten <- melt(SA2[6:197],id ="Name")
sa2_molten <- melt(SA2[6:197],id = "Name" )
View(sa2_molten)
View(sa2_molten)
sa2_molten <- melt(SA2[6:197], id = "Name")
sa2_molten <- melt(SA2, id = "Name")
sa2_molten <- melt(SA2, id = "Name")
View(sa2_molten)
sa2_molten <- melt(SA2, id=c(6:197))
View(sa2_molten)
sa2_molten <- melt(SA2,id="Name",c(6:197))
View(sa2_molten)
View(sa2_molten)
dcast??
?decast
?dcast
sa2_molten <- melt(SA2,id="Name",c(6:197))
load("complete_data.RData")
str(SA2)
sa2_molten <- melt(SA2,id="Name",c(6:197))
state_accounts <- read_csv("state_accounts.csv")
state_account_molten <- melt(state_accounts, id = "Date")
View(state_account_molten)
View(state_account_molten)
?reshape2::dcast
state_account_wide <- dcast(state_account_molten, Date ~ variable, value.var = "value")
View(state_account_wide)
state_accounts$foo
View(state_accounts)
View(state_accounts)
state_accounts$foo <- ""
View(state_accounts)
View(state_accounts)
state_account_wide2 <- dcast(state_account_molten, variable ~ Date, value.var = "value")
View(state_account_wide2)
View(state_account_wide2)
NULL
state_accounts$foo <- NULL
View(state_accounts)
sa2_molten <- melt(SA2,id=1:5)
View(sa2_molten)
View(sa2_molten)
install.packages("dplyr")
x <- matrix(rnorm(100), 10, 10)
mean(colMeans(x))
colMeans(x)
mean(colMeans(x))
library("dplyr")
library(dplyr)
x %>% colMeans %>% mean
tax.data <- read.csv("synthetic_tax.csv")
tax.data %>% group_by(Gender) %>%
summarise(mean.income = mean(Taxable_Income))
View(tax.data)
View(SA.m)
View(SA.m)
View(state_account_molten)
View(state_account_molten)
mutate(foo = c(NA, diff(log(value))))
mutate(foo = c(NA, diff(log("value"))))
mutate(foo = c(NA, diff(log(value))))
state_account_molten.data %>%
group_by(variable) %>%
mutate(foo = c(NA, diff(log(value))))
state_account_molten %>%
group_by(variable) %>%
mutate(foo = c(NA, diff(log(value))))
state_account_molten %>%
group_by(variable) %>%
mutate(foo = c(NA, diff(log(value)))) %>% as.data.frame
state_account_molten %>%
group_by(variable) %>%
mutate(foo = c(NA, diff(log(value)))) %>%
as.data.frame %>%
select(max(foo, na.rm = T))
state_account_molten %>%
group_by(variable) %>%
mutate(foo = c(NA, diff(log(value)))) %>%
select(max(foo, na.rm = T))
state_account_molten %>%
group_by(variable) %>%
mutate(foo = c(NA, diff(log(value)))) %>% as.data.frame
state_account_molten %>%
group_by(variable) %>%
mutate(compound_growth = c(NA, diff(log(value)))) %>% as.data.frame
state_account_molten %>%
group_by(variable) %>%
mutate(compound_growth = c(NA, diff(log(value)))) %>% as.data.frame %>%
group_by(Date)
state_account_molten %>%
group_by(variable) %>%
mutate(compound_growth = c(NA, diff(log(value)))) %>% as.data.frame %>%
filter(max(foo, na.rm = T))
state_account_molten %>%
group_by(variable) %>%
mutate(compound_growth = c(NA, diff(log(value)))) %>% as.data.frame %>%
filter(max(compound_growth, na.rm = T))
state_account_molten %>%
group_by(variable) %>%
mutate(compound_growth = c(NA, diff(log(value)))) %>% as.data.frame
foo  <- state_account_molten %>%
group_by(variable) %>%
mutate(compound_growth = c(NA, diff(log(value)))) %>% as.data.frame
foo
??max
x = max(foo$compound_growth, na.rm = T)
x
select (max(foo$compound_growth, na.rm = T))
tax <- read.csv("synthetic_tax.csv")
tax %>% group_by(Gender) %>%
mutate(decile=ntile(Taxable_Income,10)) %>%
group_by(Gender,decile)
foo  <- state_account_molten %>%
group_by(variable) %>%
mutate(compound_growth = c(NA, diff(log(value)))) %>% as.data.frame
foo  <- state_account_molten %>%
group_by(variable) %>%
mutate(compound_growth = c(NA, diff(log(value)))) %>% as.data.frame
state_account_molten %>%
group_by(variable) %>%
mutate(compound_growth = c(NA, diff(log(value)))) %>% as.data.frame
??filter
sa_compound <- state_account_molten %>%
group_by(variable) %>%
mutate(compound_growth = c(NA, diff(log(value))))
filter(sa_compound, max(compound_growth, na.rm = T))
sa_compound <- state_account_molten %>%
group_by(variable) %>%
mutate(compound_growth = c(NA, diff(log(value)))) %>%
filter(!is.na(compound_growth))
sa_compound
sa_compound <- state_account_molten %>%
group_by(variable) %>%
mutate(compound_growth = c(NA, diff(log(value)))) %>% #give the initial value of NA
summarise(max_compound_growth = max(compound_growth, na.rm = T))
sa_compound
state_account_molten %>%
group_by(variable) %>%
mutate(compound_growth = c(NA, diff(log(value)))) %>% #give the initial value of NA
summarise(max_compound_growth = max(compound_growth, na.rm = T)) %>% arrange(max_compound_growth)
View(sa_compound)
f <- function(x){
s <- sum(x)
n <- length(x)
output <- s/n
}
f(1,2,3)
f(c(1,2,3))
f(c(1,2,3))
d <- f(c(1,2,3))
d
d <- f(c(1,2,3))
d
f <- function(x){
browser()
s <- sum(x)
n <- length(x)
output <- s/n
}
d
f <- function(x){
browser()
s <- sum(x)
n <- length(x)
s/n
}
d
f(c(10,10))
d <- f(c(1,2,3))
f <- function(x){
#browser()
s <- sum(x)
n <- length(x)
s/n #last line gets returned
}
d <- f(c(1,2,3))
d
f(c(1,2,3))
f <- function(x){
browser()
s <- sum(x)
n <- length(x)
s/n #last line gets returned
}
f(c(1,2,3))
f1 <- function (a,b){
#browser()
out <- ifelse(x>y, x, NA)
out
}
f1(1:10,5)
f1 <- function (a,b){
#browser()
out <- ifelse(a>b, a, NA)
out
}
f1(1:10,5)
librar(stringer)
library(stringer)
install.packages("stringer")
library(stringer)
install.packages(stringer)
install.packages("stringer")
state_account_molten<- state_account_molten %>%
mutate(Year  = str_extract(Date,"[0-9]{4}") %>% as.numeric)
library(stringer)
install.packages("stringer")
install.packages("Stringer")
install.packages("Stringr")
install.packages("stringr")
library(stringr)
GDP <- state_account_molten %>%
mutate(Year  = str_extract(Date,"[0-9]{4}") %>% as.numeric) %>% group_by(Year) %>%
summarise(GDP = sum(value))
GDP <- state_account_molten %>%
mutate(Year  = str_extract(Date,"[0-9]{4}") %>% as.numeric) %>% group_by(Year) %>%
summarise(GDP = sum(value))
GDP <- state_account_molten %>%
mutate(Year = str_extract(Date,"[0-9]{4}") %>% as.numeric) %>% group_by(Year) %>%
summarise(GDP = sum(value))
GDP
GDP <- state_account_molten %>%
mutate(Year = str_extract(Date,"[0-9]{4}") %>%
as.numeric) %>% group_by(Year) %>%
summarise(GDP = sum(value))
GDP <- state_account_molten %>%
mutate(Year = str_extract(Date,"[0-9]{4}") %>% as.numeric) %>% group_by(Year) %>%
summarise(GDP = sum(value))
GDP <- state_account_molten %>%
mutate(Year = str_extract(Date,"[0-9]{4}") %>% as.numeric) %>% group_by(Year) %>%
summarise(GDP = sum(value)) %>%
mutate(GDP_growth = c(NA, diff(log(GDP))))
GDP <- state_account_molten %>%
mutate(Year = str_extract(Date,"[0-9]{4}") %>% as.numeric) %>% group_by(Year) %>%
summarise(GDP = sum(value)) %>%
mutate(GDP_growth = c(NA, diff(log(GDP))))
View(state_account_molten)
GDP <- state_account_molten %>%
mutate(Year = str_extract(Date,"[0-9]{4}") %>% as.numeric) %>% group_by(Year) %>%
summarise(GDP = sum(value)) %>%
mutate(GDP_growth = c(NA, diff(log(GDP))))
library(dplyr)
GDP <- state_account_molten %>%
mutate(Year = str_extract(Date,"[0-9]{4}") %>% as.numeric) %>% group_by(Year) %>%
summarise(GDP = sum(value)) %>%
mutate(GDP_growth = c(NA, diff(log(GDP))))
GDP
superreturns <- SA2.melt %>% filter(!is.na(value)) %>%
mutate(Year = str_extract(variable, "[0-9]{4}") %>% as.numeric) %>%
group_by(Year) %>%
summarise(Average_returns = (1+mean(value)/100)^12-1)
superreturns <- SA2.m %>% filter(!is.na(value)) %>%
mutate(Year = str_extract(variable, "[0-9]{4}") %>% as.numeric) %>%
group_by(Year) %>%
summarise(Average_returns = (1+mean(value)/100)^12-1)
View(SA2.m)
View(SA2.m)
View(SA2.m)
View(sa2_molten)
superreturns <- sa2_molten %>% filter(!is.na(value)) %>%
mutate(Year = str_extract(variable, "[0-9]{4}") %>% as.numeric) %>%
group_by(Year) %>%
summarise(Average_returns = (1+mean(value)/100)^12-1)
output <- left_join(GDP, superreturns)
plot(output$GDP_growth, output$Average_returns)
