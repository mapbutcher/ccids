{
    "contents" : "---\ntitle: \"Week1Session2\"\nauthor: \"Simon Hope\"\ndate: \"August 6, 2015\"\noutput: html_document\n---\n\n```{r}\n\nload(\"complete_data.RData\")\nstr(SA2)\n#id is the column we want to KEEP as a column\nsa2_molten <- melt(SA2,id=1:5)\n\nstate_accounts <- read_csv(\"state_accounts.csv\")\n#multiple id columns can be specified using c(\"columnA\",\"columnB\")\nstate_account_molten <- melt(state_accounts, id = \"Date\")\n\n#namespacing the dcast function to reshape2, just in case anyone else has declared a function called dcast\n?reshape2::dcast\n\n#'variable' is the name of the column which is going to be converted to be exploded\n# Date is variable that we want down the rows\n# 'variable' (which is state i.e. NSW) is across the columns\n# 'value' is the observations\nstate_account_wide <- dcast(state_account_molten, Date ~ variable, value.var = \"value\")\n\n#Columns can be added using $\nstate_accounts$foo <- \"\" #add column\nstate_accounts$foo <- NULL #remove column\n\nstate_account_wide2 <- dcast(state_account_molten, variable ~ Date, value.var = \"value\")\n\ninstall.packages(\"dplyr\")\n\nx <- matrix(rnorm(100), 10, 10)\nmean(colMeans(x))\n\nlibrary(dplyr)\n#using pipes tell whatever is on the left then give it to the function on the right\n#and again to the next function on the right (i.e. chain functions)\nx %>% colMeans %>% mean\n\n#mutate and summarise allows for multiple columns to be added\n\ntax.data <- read.csv(\"synthetic_tax.csv\")\n\ntax.data %>% group_by(Gender) %>%\n  summarise(mean.income = mean(Taxable_Income))\n\nsa_compound <- state_account_molten %>% \n  group_by(variable) %>%\n    mutate(compound_growth = c(NA, diff(log(value)))) %>% #give the initial value of NA\n      summarise(max_compound_growth = max(compound_growth, na.rm = T)) %>% \n          arrange(max_compound_growth)\n      \n\n\nfilter(!is.na(compound_growth)) # filters the NA's out\n\n\nfilter(sa_compound, max(compound_growth, na.rm = T))\n\ntax <- read.csv(\"synthetic_tax.csv\")\n\ntax %>% group_by(Gender) %>%\n  mutate(decile=ntile(Taxable_Income,10)) %>%\n    group_by(Gender,decile)\n\nf <- function(x){\n  browser()\n  s <- sum(x)\n  n <- length(x)\n  s/n #last line gets returned\n}\n\nd <- f(c(1,2,3))\n\nf1 <- function (a,b){\n  #browser()\n  out <- ifelse(a>b, a, NA) #note we can give ifelse a vector and it automatically iterates over the elemements of the vector\n  out\n}\n\ninstall.packages(\"stringr\")\nlibrary(stringr)\nlibrary(dplyr)\nGDP <- state_account_molten %>%\n  mutate(Year = str_extract(Date,\"[0-9]{4}\") %>% as.numeric) %>% group_by(Year) %>%\n    summarise(GDP = sum(value)) %>%\n    mutate(GDP_growth = c(NA, diff(log(GDP))))\n\nsuperreturns <- sa2_molten %>% filter(!is.na(value)) %>%\n  mutate(Year = str_extract(variable, \"[0-9]{4}\") %>% as.numeric) %>%\n  group_by(Year) %>%\n  summarise(Average_returns = (1+mean(value)/100)^12-1)\n\noutput <- left_join(GDP, superreturns)\n\nplot(output$GDP_growth, output$Average_returns)\n\n\n```\n\nYou can also embed plots, for example:\n\n```{r, echo=FALSE}\n```\n\nNote that the `echo = FALSE` parameter was added to the code chunk to prevent printing of the R code that generated the plot.\n",
    "created" : 1438848710154.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2809025589",
    "id" : "DF144D90",
    "lastKnownWriteTime" : 1438901398,
    "path" : "~/Dev/ccids/IDS_work/Week1Session2.Rmd",
    "project_path" : "Week1Session2.Rmd",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "source_on_save" : false,
    "type" : "r_markdown"
}